{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Aviatrix Systems - Workload Stack - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance. **WARNING** You will be billed for the AWS resources used if you create a stack from this template. (qs-1o6p25lhf)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "PublicSubnet1CIDR",
                        "PublicSubnet1",
                        "PublicSubnet2CIDR",
                        "PublicSubnet2"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPair"
                    ]
                },
                {
                    "Label": {
                        "default": "Controller Information"
                    },
                    "Parameters": [
                        "AdminEmail",
                        "Password",
                        "ControllerSize"
                    ]
                },
                {
                    "Label": {
                        "default": "Licensing Configuration"
                    },
                    "Parameters": [
                        "LicenseModel",
                        "LicenseKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Gateway Information"
                    },
                    "Parameters": [
                        "HubGWSize",
                        "SpokeGWSize",
                        "SpokeTag"
                    ]
                },
                {
                    "Label": {
                        "default": "IAM Roles"
                    },
                    "Parameters": [
                        "CreateIamRole"
                    ]
                },
                {
                    "Label": {
                        "default": "Optional 2nd AWS Account Configuration"
                    },
                    "Parameters": [
                        "OtherAccount",
                        "OtherAccountRoleApp",
                        "OtherAccountRoleEC2"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "AdminEmail": {
                    "default": "Administrator email address"
                },
                "ControllerSize": {
                    "default": "Aviatrix Controller instance type"
                },
                "CreateIamRole": {
                    "default": "Create the IAM roles"
                },
                "HubGWSize": {
                    "default": "Aviatrix Hub Gateway instance type"
                },
                "KeyPair": {
                    "default": "Keypair"
                },
                "LicenseKey": {
                    "default": "Enter your license key:"
                },
                "LicenseModel": {
                    "default": "Licensing Model:"
                },
                "OtherAccount": {
                    "default": "Second Account number"
                },
                "OtherAccountRoleApp": {
                    "default": "ARN for Aviatrix-role-app on secondary account"
                },
                "OtherAccountRoleEC2": {
                    "default": "ARN for aviatrix-role-ec2 on secondary account"
                },
                "Password": {
                    "default": "Aviatrix Controller Admin Password"
                },
                "PublicSubnet1": {
                    "default": "Public Subnet 1"
                },
                "PublicSubnet1CIDR": {
                    "default": "Public Subnet 1 CIDR"
                },
                "PublicSubnet2": {
                    "default": "Public Subnet 2"
                },
                "PublicSubnet2CIDR": {
                    "default": "Public Subnet 2 CIDR"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "SpokeGWSize": {
                    "default": "Aviatrix Spoke Gateway instance type"
                },
                "SpokeTag": {
                    "default": "Spoke VPC Tag Name"
                },
                "VPCID": {
                    "default": "VPC ID"
                }
            }
        }
    },
    "Parameters": {
        "AdminEmail": {
            "Description": " Email of the controller's admin",
            "Type": "String"
        },
        "ControllerSize": {
            "AllowedValues": [
                "t2.large",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge"
            ],
            "Default": "t2.large",
            "Description": "Select an instance size.",
            "Type": "String"
        },
        "CreateIamRole": {
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Default": "Yes",
            "Description": "Create an IAM role",
            "Type": "String"
        },
        "HubGWSize": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m4.large",
                "m4.xlarge",
                "c4.large",
                "c4.xlarge"
            ],
            "Default": "t2.medium",
            "Description": "Select an instance size.",
            "Type": "String"
        },
        "KeyPair": {
            "Description": "Select instance Keypair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "LicenseKey": {
            "Description": "(Optional) Needed only if you select BYOL abvoe. If you don't have license key, please contact sales@aviatrix.com. For LicenseIncluded license model, leave BLANK",
            "Type": "String"
        },
        "LicenseModel": {
            "AllowedValues": [
                "LicenseIncluded",
                "BYOL"
            ],
            "Default": "LicenseIncluded",
            "Description": "Choose between BYOL or License Included - licensing models.",
            "Type": "String"
        },
        "OtherAccount": {
            "Default": "",
            "Description": "Enter the account number of the secondary AWS account where spokes will be deployed.",
            "Type": "String"
        },
        "OtherAccountRoleApp": {
            "Default": "",
            "Description": "Enter the ARN of the aviatrix-role-app on the secondary account where spokes will be deployed.",
            "Type": "String"
        },
        "OtherAccountRoleEC2": {
            "Default": "",
            "Description": "Enter the ARN of the Aviatrix-role-ec2 on the secondary account where spokes will be deployed.",
            "Type": "String"
        },
        "Password": {
            "Description": " Password for the controller. Please use a complex password.",
            "NoEcho": true,
            "Type": "String"
        },
        "PublicSubnet1": {
            "Description": "Public subnet 1 Id",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR Block for the public DMZ subnet 1 located in Availability Zone 1",
            "Type": "String"
        },
        "PublicSubnet2": {
            "Description": "Public subnet 2 Id",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR Block for the public DMZ subnet 2 located in Availability Zone 2",
            "Type": "String"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "aviatrix/nextgentransithub/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "SpokeGWSize": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m4.large",
                "m4.xlarge",
                "c4.large",
                "c4.xlarge"
            ],
            "Default": "t2.micro",
            "Description": "Select an instance size.",
            "Type": "String"
        },
        "SpokeTag": {
            "Default": "aviatrix-spoke",
            "Description": "Tag to be used to identify spoke VPCs to connect to Transit VPC. Default is aviatrix-spoke.",
            "Type": "String"
        },
        "VPCID": {
            "Description": "VPC Id",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Conditions": {
        "NotBlankLicense": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "LicenseKey"
                        },
                        ""
                    ]
                }
            ]
        },
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "CreateIamRoleCondition": {
            "Fn::Equals": [
                {
                    "Ref": "CreateIamRole"
                },
                "Yes"
            ]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AVIATRIXLI": "aviatrix_cloud_services_gateway_111517_100_tunnel-b4ad3e0e-f165-4cc6-9914-175c7ff20910-ami-6b6f1711.4",
                "AVIATRIXBYOL": "aviatrix_cloud_services_gateway_111517_BYOL-109cd06c-210a-4fa4-839b-708683c66dc6-ami-b38d38c9.4"
            },
            "us-east-1": {
                "AVIATRIXLI": "ami-855463ff",
                "AVIATRIXBYOL": "ami-db9bb9a1"
            },
            "us-east-2": {
                "AVIATRIXLI": "ami-9db399f8",
                "AVIATRIXBYOL": "ami-b40228d1"
            },
            "us-west-1": {
                "AVIATRIXLI": "ami-ee1b168e",
                "AVIATRIXBYOL": "ami-2a7e7c4a"
            },
            "us-west-2": {
                "AVIATRIXLI": "ami-baea56c2",
                "AVIATRIXBYOL": "ami-fd48f885"
            },
            "ca-central-1": {
                "AVIATRIXLI": "ami-a90184cd",
                "AVIATRIXBYOL": "ami-de4bceba"
            },
            "eu-central-1": {
                "AVIATRIXLI": "ami-49c05926",
                "AVIATRIXBYOL": "ami-a025b9cf"
            },
            "eu-west-1": {
                "AVIATRIXLI": "ami-5c99fc25",
                "AVIATRIXBYOL": "ami-830d93fa"
            },
            "eu-west-2": {
                "AVIATRIXLI": "ami-c6b7aca2",
                "AVIATRIXBYOL": "ami-bc253ed8"
            },
            "eu-west-3": {
                "AVIATRIXLI": "ami-0cd06671",
                "AVIATRIXBYOL": "ami-f8e35585"
            },
            "ap-southeast-1": {
                "AVIATRIXLI": "ami-1cfd8460",
                "AVIATRIXBYOL": "ami-0484f878"
            },
            "ap-southeast-2": {
                "AVIATRIXLI": "ami-618f7103",
                "AVIATRIXBYOL": "ami-34728e56"
            },
            "ap-northeast-2": {
                "AVIATRIXLI": "ami-fdae0d93",
                "AVIATRIXBYOL": "ami-d902a2b7"
            },
            "ap-northeast-1": {
                "AVIATRIXLI": "ami-d10163b7",
                "AVIATRIXBYOL": "ami-2a43244c"
            },
            "ap-south-1": {
                "AVIATRIXLI": "ami-b65203d9",
                "AVIATRIXBYOL": "ami-e7560088"
            },
            "sa-east-1": {
                "AVIATRIXLI": "ami-ba1c50d6",
                "AVIATRIXBYOL": "ami-404c012c"
            }
        },
        "AMINameMap": {
            "LicenseIncluded": {
                "Code": "AVIATRIXLI"
            },
            "BYOL": {
                "Code": "AVIATRIXBYOL"
            }
        }
    },
    "Resources": {
        "AVXAPIRolePolicy": {
            "DependsOn": [
                "AVXRoleAPI"
            ],
            "Properties": {
                "Description": "Policy for creating aviatrix-api-role-policy",
                "Path": "/",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ec2:Describe*",
                                "ec2:CreateTags",
                                "SNS:Publish",
                                "STS:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Roles": [
                    {
                        "Ref": "AVXRoleAPI"
                    }
                ]
            },
            "Type": "AWS::IAM::ManagedPolicy"
        },
        "AVXController": {
            "DependsOn": [
                "AVXSG",
                "WaitCondition"
            ],
            "Properties": {
                "IamInstanceProfile": "aviatrix-role-ec2",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AMINameMap",
                                {
                                    "Ref": "LicenseModel"
                                },
                                "Code"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "ControllerSize"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "AVXSG"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "PublicSubnet1"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Aviatrix Controller"
                    },
                    {
                        "Key": "Project",
                        "Value": "Aviatrix"
                    },
                    {
                        "Key": "CreatedUsing",
                        "Value": "Aviatrix Quickstart"
                    }
                ]
            },
            "Type": "AWS::EC2::Instance"
        },
        "AVXControllerLambda": {
            "DependsOn": [
                "AVXEIP",
                "AVXRoleAPI",
                "AVXAPIRolePolicy",
                "AVXKey",
                "AVXGWQueue",
                "AVXGWTopic"
            ],
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "AVXLambdaZipsBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${QSS3KeyPrefix}scripts/aviatrix_controller.py.zip"
                    }
                },
                "Environment": {
                    "Variables": {
                        "Account": {
                            "Ref": "AWS::AccountId"
                        },
                        "Admin_Email": {
                            "Ref": "AdminEmail"
                        },
                        "AviatrixRoleApp": {
                            "Fn::Join": [
                                "",
                                [
                                    "arn:aws:iam::",
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    ":role/aviatrix-role-app"
                                ]
                            ]
                        },
                        "AviatrixRoleEC2": {
                            "Fn::Join": [
                                "",
                                [
                                    "arn:aws:iam::",
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    ":role/aviatrix-role-ec2"
                                ]
                            ]
                        },
                        "Controller_IP": {
                            "Fn::GetAtt": [
                                "AVXController",
                                "PublicIp"
                            ]
                        },
                        "GatewayQueue": {
                            "Fn::GetAtt": [
                                "AVXGWQueue",
                                "QueueName"
                            ]
                        },
                        "GatewayQueueURL": {
                            "Ref": "AVXGWQueue"
                        },
                        "GatewayTopic": {
                            "Ref": "AVXGWTopic"
                        },
                        "HubGWSize": {
                            "Ref": "HubGWSize"
                        },
                        "License": {
                            "Ref": "LicenseKey"
                        },
                        "LicenseModel": {
                            "Ref": "LicenseModel"
                        },
                        "OtherAccount": {
                            "Ref": "OtherAccount"
                        },
                        "OtherAccountRoleApp": {
                            "Ref": "OtherAccountRoleApp"
                        },
                        "OtherAccountRoleEC2": {
                            "Ref": "OtherAccountRoleEC2"
                        },
                        "Password": {
                            "Ref": "Password"
                        },
                        "Private_IP": {
                            "Fn::GetAtt": [
                                "AVXController",
                                "PrivateIp"
                            ]
                        },
                        "Region": {
                            "Ref": "AWS::Region"
                        },
                        "SpokeGWSize": {
                            "Ref": "SpokeGWSize"
                        },
                        "Subnet": {
                            "Ref": "PublicSubnet1CIDR"
                        },
                        "SubnetHA": {
                            "Ref": "PublicSubnet2CIDR"
                        },
                        "Username": "admin",
                        "VPC": {
                            "Ref": "VPCID"
                        }
                    }
                },
                "Handler": "aviatrix_controller.handler",
                "KmsKeyArn": {
                    "Fn::GetAtt": [
                        "AVXKey",
                        "Arn"
                    ]
                },
                "Role": {
                    "Fn::GetAtt": [
                        "AVXRoleAPI",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "300"
            },
            "Type": "AWS::Lambda::Function"
        },
        "AVXControllerLambdaTrigger": {
            "DependsOn": "AVXControllerLambda",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "AVXControllerLambda",
                        "Arn"
                    ]
                }
            },
            "Type": "Custom::ControllerLamdbdaTrigger"
        },
        "AVXCopyZips": {
            "Properties": {
                "DestBucket": {
                    "Ref": "AVXLambdaZipsBucket"
                },
                "Objects": [
                    "scripts/aviatrix_controller.py.zip",
                    "scripts/aviatrix_gateway.py.zip",
                    "scripts/aviatrix_poller.py.zip"
                ],
                "Prefix": {
                    "Ref": "QSS3KeyPrefix"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "AVXCopyZipsFunction",
                        "Arn"
                    ]
                },
                "SourceBucket": {
                    "Ref": "QSS3BucketName"
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
        "AVXCopyZipsFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import logging",
                                "import threading",
                                "",
                                "import boto3",
                                "",
                                "import cfnresponse",
                                "",
                                "",
                                "def copy_objects(source_bucket, dest_bucket, prefix, objects):",
                                "    s3 = boto3.client('s3')",
                                "    for o in objects:",
                                "        key = prefix + o",
                                "        copy_source = {",
                                "            'Bucket': source_bucket,",
                                "            'Key': key",
                                "        }",
                                "        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)",
                                "",
                                "",
                                "def delete_objects(bucket, prefix, objects):",
                                "    s3 = boto3.client('s3')",
                                "    objects = {'Objects': [{'Key': prefix + o} for o in objects]}",
                                "    s3.delete_objects(Bucket=bucket, Delete=objects)",
                                "",
                                "",
                                "def timeout(event, context):",
                                "    logging.error('Execution is about to time out, sending failure response to CloudFormation')",
                                "    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)",
                                "",
                                "",
                                "def handler(event, context):",
                                "    # make sure we send a failure to CloudFormation if the function is going to timeout",
                                "    timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])",
                                "    timer.start()",
                                "",
                                "    print('Received event: %s' % json.dumps(event))",
                                "    status = cfnresponse.SUCCESS",
                                "    try:",
                                "        source_bucket = event['ResourceProperties']['SourceBucket']",
                                "        dest_bucket = event['ResourceProperties']['DestBucket']",
                                "        prefix = event['ResourceProperties']['Prefix']",
                                "        objects = event['ResourceProperties']['Objects']",
                                "        if event['RequestType'] == 'Delete':",
                                "            delete_objects(dest_bucket, prefix, objects)",
                                "        else:",
                                "            copy_objects(source_bucket, dest_bucket, prefix, objects)",
                                "    except Exception as e:",
                                "        logging.error('Exception: %s' % e, exc_info=True)",
                                "        status = cfnresponse.FAILED",
                                "    finally:",
                                "        timer.cancel()",
                                "        cfnresponse.send(event, context, status, {}, None)",
                                ""
                            ]
                        ]
                    }
                },
                "Description": "Copies objects from a source S3 bucket to a destination",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "AVXLambdaCopyExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 240
            },
            "Type": "AWS::Lambda::Function"
        },
        "AVXEIP": {
            "DependsOn": "AVXController",
            "Properties": {
                "InstanceId": {
                    "Ref": "AVXController"
                }
            },
            "Type": "AWS::EC2::EIP"
        },
        "AVXGWQueue": {
            "Type": "AWS::SQS::Queue"
        },
        "AVXGWTopic": {
            "DependsOn": "AVXGatewayLambda",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "AVXGatewayLambda",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ]
            },
            "Type": "AWS::SNS::Topic"
        },
        "AVXGatewayLambda": {
            "DependsOn": [
                "AVXEIP",
                "AVXRoleAPI",
                "AVXAPIRolePolicy",
                "AVXKey"
            ],
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "AVXLambdaZipsBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${QSS3KeyPrefix}scripts/aviatrix_gateway.py.zip"
                    }
                },
                "Environment": {
                    "Variables": {
                        "Controller_IP": {
                            "Fn::GetAtt": [
                                "AVXController",
                                "PublicIp"
                            ]
                        },
                        "GatewayQueue": {
                            "Fn::GetAtt": [
                                "AVXGWQueue",
                                "QueueName"
                            ]
                        },
                        "GatewayQueueURL": {
                            "Ref": "AVXGWQueue"
                        },
                        "HubGWSize": {
                            "Ref": "HubGWSize"
                        },
                        "OtherAccountRoleApp": {
                            "Ref": "OtherAccountRoleApp"
                        },
                        "Password": {
                            "Ref": "Password"
                        },
                        "Region": {
                            "Ref": "AWS::Region"
                        },
                        "SpokeGWSize": {
                            "Ref": "SpokeGWSize"
                        },
                        "SpokeTag": {
                            "Ref": "SpokeTag"
                        },
                        "Username": "admin",
                        "VPC": {
                            "Ref": "VPCID"
                        }
                    }
                },
                "Handler": "aviatrix_gateway.handler",
                "KmsKeyArn": {
                    "Fn::GetAtt": [
                        "AVXKey",
                        "Arn"
                    ]
                },
                "Role": {
                    "Fn::GetAtt": [
                        "AVXRoleAPI",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "300"
            },
            "Type": "AWS::Lambda::Function"
        },
        "AVXKey": {
            "DependsOn": "AVXRoleAPI",
            "Properties": {
                "Description": "Key to encrypt Aviatrix Data",
                "KeyPolicy": {
                    "Id": "key-default-1",
                    "Statement": [
                        {
                            "Action": "kms:*",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "Resource": "*",
                            "Sid": "Enable IAM User Permissions"
                        },
                        {
                            "Action": [
                                "kms:Encrypt",
                                "kms:Decrypt",
                                "kms:ReEncrypt*",
                                "kms:GenerateDataKey*",
                                "kms:DescribeKey"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::GetAtt": [
                                            "AVXRoleAPI",
                                            "Arn"
                                        ]
                                    }
                                ]
                            },
                            "Resource": "*",
                            "Sid": "Allow use of the key"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::KMS::Key"
        },
        "AVXLambdaCopyExecutionRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Action": [
                                        "s3:DeleteObject",
                                        "s3:GetObject",
                                        "s3:PutObject",
                                        "s3:ListBucket",
                                        "s3:PutObjectAcl"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "arn:aws:s3:::*"
                                },
                                {
                                    "Action": [
                                        "s3:GetBucketLocation"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "QSS3BucketName"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:DeleteObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "AVXLambdaZipsBucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "root"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "AVXLambdaZipsBucket": {
            "Properties": {
                "Tags": []
            },
            "Type": "AWS::S3::Bucket"
        },
        "AVXPollerEvent": {
            "DependsOn": "AVXPollerLambda",
            "Properties": {
                "Description": "Rule to trigger AviatrixPoller every 2 minutes to find VPCs that need to be attached to the Transit Hub VPC.",
                "ScheduleExpression": "cron(/2 * * * ? *)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "AVXPollerLambda",
                                "Arn"
                            ]
                        },
                        "Id": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "Poller-2min"
                                ]
                            ]
                        }
                    }
                ]
            },
            "Type": "AWS::Events::Rule"
        },
        "AVXPollerEventPerm": {
            "DependsOn": "AVXPollerEvent",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "AVXPollerLambda"
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "AVXPollerEvent",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::Lambda::Permission"
        },
        "AVXPollerLambda": {
            "DependsOn": [
                "AVXGWQueue",
                "AVXGWTopic"
            ],
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "AVXLambdaZipsBucket"
                    },
                    "S3Key": {
                        "Fn::Sub": "${QSS3KeyPrefix}scripts/aviatrix_poller.py.zip"
                    }
                },
                "Environment": {
                    "Variables": {
                        "GatewayQueue": {
                            "Fn::GetAtt": [
                                "AVXGWQueue",
                                "QueueName"
                            ]
                        },
                        "GatewayQueueURL": {
                            "Ref": "AVXGWQueue"
                        },
                        "GatewayTopic": {
                            "Ref": "AVXGWTopic"
                        },
                        "HubVPC": {
                            "Ref": "VPCID"
                        },
                        "OtherAccountRoleApp": {
                            "Ref": "OtherAccountRoleApp"
                        },
                        "SpokeGWSize": {
                            "Ref": "SpokeGWSize"
                        },
                        "SpokeTag": {
                            "Ref": "SpokeTag"
                        }
                    }
                },
                "Handler": "aviatrix_poller.handler",
                "KmsKeyArn": {
                    "Fn::GetAtt": [
                        "AVXKey",
                        "Arn"
                    ]
                },
                "Role": {
                    "Fn::GetAtt": [
                        "AVXRoleAPI",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "300"
            },
            "Type": "AWS::Lambda::Function"
        },
        "AVXRoleAPI": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com",
                                    "edgelambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "AVXSG": {
            "Properties": {
                "GroupDescription": "Aviatrix - Allow HTTPS to Controller",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Aviatrix Security Group"
                    },
                    {
                        "Key": "Project",
                        "Value": "Aviatrix"
                    },
                    {
                        "Key": "CreatedUsing",
                        "Value": "Aviatrix Quickstart"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "AviatrixInstanceProfile": {
            "Condition": "CreateIamRoleCondition",
            "DependsOn": [
                "AviatrixRoleEC2",
                "CreateAviatrixAssumeRolePolicy",
                "CreateAviatrixAppPolicy"
            ],
            "Properties": {
                "InstanceProfileName": "aviatrix-role-ec2",
                "Path": "/",
                "Roles": [
                    "aviatrix-role-ec2"
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "AviatrixRoleApp": {
            "Condition": "CreateIamRoleCondition",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "RoleName": "aviatrix-role-app"
            },
            "Type": "AWS::IAM::Role"
        },
        "AviatrixRoleEC2": {
            "Condition": "CreateIamRoleCondition",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "RoleName": "aviatrix-role-ec2"
            },
            "Type": "AWS::IAM::Role"
        },
        "CreateAviatrixAppPolicy": {
            "Condition": "CreateIamRoleCondition",
            "DependsOn": [
                "AviatrixRoleEC2",
                "AviatrixRoleApp"
            ],
            "Properties": {
                "Description": "Policy for creating aviatrix-app-policy",
                "ManagedPolicyName": "aviatrix-app-policy",
                "Path": "/",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "ec2:Describe*",
                                "elasticloadbalancing:Describe*",
                                "route53:List*",
                                "route53:Get*",
                                "sqs:Get*",
                                "sqs:List*",
                                "sns:List*",
                                "s3:List*",
                                "s3:Get*",
                                "iam:List*",
                                "iam:Get*"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "ec2:RunInstances"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": "ec2:RunInstances",
                            "Effect": "Allow",
                            "Resource": "arn:aws:ec2:*:*:image/ami-*"
                        },
                        {
                            "Action": [
                                "ec2:DeleteSecurityGroup",
                                "ec2:RevokeSecurityGroupEgress",
                                "ec2:RevokeSecurityGroupIngress",
                                "ec2:AuthorizeSecurityGroup*",
                                "ec2:CreateSecurityGroup",
                                "ec2:AssociateRouteTable",
                                "ec2:CreateRoute",
                                "ec2:CreateRouteTable",
                                "ec2:DeleteRoute",
                                "ec2:DeleteRouteTable",
                                "ec2:DisassociateRouteTable",
                                "ec2:ReplaceRoute",
                                "ec2:ReplaceRouteTableAssociation"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "ec2:AllocateAddress",
                                "ec2:AssociateAddress",
                                "ec2:DisassociateAddress",
                                "ec2:ReleaseAddress",
                                "ec2:AssignPrivateIpAddresses",
                                "ec2:AttachNetworkInterface",
                                "ec2:CreateNetworkInterface",
                                "ec2:DeleteNetworkInterface",
                                "ec2:DetachNetworkInterface",
                                "ec2:ModifyNetworkInterfaceAttribute",
                                "ec2:ResetNetworkInterfaceAttribute",
                                "ec2:UnassignPrivateIpAddresses",
                                "ec2:ModifyInstanceAttribute",
                                "ec2:MonitorInstances",
                                "ec2:RebootInstances",
                                "ec2:ReportInstanceStatus",
                                "ec2:ResetInstanceAttribute",
                                "ec2:StartInstances",
                                "ec2:StopInstances",
                                "ec2:TerminateInstances",
                                "ec2:UnmonitorInstances",
                                "ec2:AttachInternetGateway",
                                "ec2:CreateInternetGateway",
                                "ec2:DeleteInternetGateway",
                                "ec2:DetachInternetGateway",
                                "ec2:CreateKeyPair",
                                "ec2:DeleteKeyPair",
                                "ec2:CreateSubnet",
                                "ec2:DeleteSubnet",
                                "ec2:ModifySubnetAttribute",
                                "ec2:CreateTags",
                                "ec2:DeleteTags",
                                "ec2:CreateVpc",
                                "ec2:DeleteVpc",
                                "ec2:ModifyVpcAttribute",
                                "ec2:CreateCustomerGateway",
                                "ec2:DeleteCustomerGateway",
                                "ec2:CreateVpnConnection",
                                "ec2:DeleteVpnConnection",
                                "ec2:CreateVpcPeeringConnection",
                                "ec2:AcceptVpcPeeringConnection",
                                "ec2:DeleteVpcPeeringConnection"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                                "elasticloadbalancing:AttachLoadBalancerToSubnets",
                                "elasticloadbalancing:ConfigureHealthCheck",
                                "elasticloadbalancing:CreateLoadBalancer*",
                                "elasticloadbalancing:DeleteLoadBalancer*",
                                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                                "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "route53:ChangeResourceRecordSets",
                                "route53:CreateHostedZone",
                                "route53:DeleteHostedZone"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "s3:CreateBucket",
                                "s3:DeleteBucket",
                                "s3:PutObject",
                                "s3:DeleteObject"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "sqs:AddPermission",
                                "sqs:ChangeMessageVisibility",
                                "sqs:CreateQueue",
                                "sqs:DeleteMessage",
                                "sqs:DeleteQueue",
                                "sqs:PurgeQueue",
                                "sqs:ReceiveMessage",
                                "sqs:RemovePermission",
                                "sqs:SendMessage",
                                "sqs:SetQueueAttributes"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:iam::*"
                        },
                        {
                            "Action": [
                                "iam:PassRole",
                                "iam:AddRoleToInstanceProfile",
                                "iam:CreateInstanceProfile",
                                "iam:DeleteInstanceProfile",
                                "iam:RemoveRoleFromInstanceProfile"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Roles": [
                    {
                        "Ref": "AviatrixRoleApp"
                    }
                ]
            },
            "Type": "AWS::IAM::ManagedPolicy"
        },
        "CreateAviatrixAssumeRolePolicy": {
            "Condition": "CreateIamRoleCondition",
            "DependsOn": [
                "AviatrixRoleEC2",
                "AviatrixRoleApp"
            ],
            "Properties": {
                "Description": "Policy for creating aviatrix-assume-role-policy",
                "ManagedPolicyName": "aviatrix-assume-role-policy",
                "Path": "/",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "iam:UpdateAssumeRolePolicy",
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:iam::*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Roles": [
                    {
                        "Ref": "AviatrixRoleEC2"
                    }
                ]
            },
            "Type": "AWS::IAM::ManagedPolicy"
        },
        "IamRoleWaitHandle": {
            "Condition": "CreateIamRoleCondition",
            "DependsOn": [
                "AviatrixRoleEC2",
                "AviatrixRoleApp",
                "CreateAviatrixAssumeRolePolicy",
                "CreateAviatrixAppPolicy",
                "AviatrixInstanceProfile"
            ],
            "Properties": {},
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "InvokeGWLambda": {
            "DependsOn": [
                "AVXGWTopic",
                "AVXGatewayLambda"
            ],
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AVXGatewayLambda",
                        "Arn"
                    ]
                },
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "AVXGWTopic"
                }
            },
            "Type": "AWS::Lambda::Permission"
        },
        "WaitCondition": {
            "Properties": {
                "Count": 0,
                "Handle": {
                    "Fn::If": [
                        "CreateIamRoleCondition",
                        {
                            "Ref": "IamRoleWaitHandle"
                        },
                        {
                            "Ref": "WaitHandle"
                        }
                    ]
                },
                "Timeout": 1
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "WaitHandle": {
            "Properties": {},
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }
    },
    "Outputs": {
        "AviatrixControllerEIP": {
            "Description": "AviatrixController External IP",
            "Value": {
                "Fn::GetAtt": [
                    "AVXController",
                    "PublicIp"
                ]
            }
        },
        "AviatrixControllerPrivateIP": {
            "Description": "AviatrixController Private IP",
            "Value": {
                "Fn::GetAtt": [
                    "AVXController",
                    "PrivateIp"
                ]
            }
        }
    }
}